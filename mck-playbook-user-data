#!/usr/bin/ansible-playbook
 
---
- hosts: all
  vars:
    env: "con"
    techops_bucket: "msd-techops-install-prd"
    splunk_elb: "internal-msd-con-splunk-int-elb-1128473415.us-east-1.elb.amazonaws.com"
    splunk_elb_port: "9997"
    bitdefender_file: "bitdefender.tar"
    nessus_agent_key: "db175a700905e5c79f84f15f77f8583eff2c63a46ccc113b4a2778e6917e8bed"
    nessus_group: "msd-con"
    nessus_host: "nessus.mckinsey-solutions.com"
    nessus_port: "443"
    newrelic_license_key: "c9d0a3147c678da100578bf320093748517eac8c"
 
  tasks:
 
  - name: Gather EC2 instance metadata
    action: ec2_facts
 
  - name: Set hostname to Name tag + instance id
    hostname: name="msd-con-frontend-asg-{{ ansible_ec2_instance_id }}"
 
  - name: Install
    yum: name=https://centos6.iuscommunity.org/ius-release.rpm
 
  - name: install SSM Agent
    yum:
      name: "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm"
      state: present
    when: ansible_distribution == 'Amazon'
 
  - name: Ensure mount directory exists.
    file:
      path: "/mnt/efs1"
      state: directory
      mode: 0755
  - name: Ensure EFS volume is mounted.
    mount:
      name: "/mnt/efs1"
      src: "efs-target-manual-encypted.mckinsey-solutions.com:/"
      fstype: nfs4
      opts: nfsvers=4.1
      state: mounted
  - name: Create parent directory for /var/www/html
    file:
      path: "/var/www/"
      state: directory
      recurse: yes
      mode: 0755
  - name: Create symlink for web files to efs
    file:
      path: "/var/www/html"
      state: link
      src: "/mnt/efs1"
  - name: Install IUS (CentOS) repo.
    yum: name=https://centos6.iuscommunity.org/ius-release.rpm
  - name: install SSM Agent
    yum:
      name: "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm"
      state: present
    when: ansible_distribution == 'Amazon'
  - name: Install list of packages
    yum: name={{item}} state=installed
    with_items:
      - mysql
      - php54
      - php54-fpm
      - php54-gd
      - php54-mbstring
      - php54-mysql
      - php54-xml
  - name: make sure apache is running
    service: name=httpd state=started enabled=yes
  - copy:
      content: |
               <VirtualHost *:80>
                 ServerName msd
                 DocumentRoot /var/www/html/drupal
                 <Directory />
                    Options FollowSymlinks
                    AllowOverride All
                 </Directory>
               </VirtualHost>
      dest: /etc/httpd/conf.d/drupal.conf
    notify:
      - restart apache
  - replace:
      path: /etc/httpd/conf/httpd.conf
      regexp: 'AllowOverride None'
      replace: 'AllowOverride All'
      backup: yes
    notify:
      - restart apache
 
  - name: Configure splunk inputs.conf
    copy:
      content: |
                [default]
               host = {{ ansible_hostname }}
 
                [monitor:///var/log]
                disabled = false
                sourcetype = syslog
                index = main
               
                [monitor:///var/log/aws/codedeploy-agent]
                disabled = false
                sourcetype = codedeploy
                index = main
               
                [monitor:///var/log/upstart/amazon-ssm-agent.log]
                disabled = false
                sourcetype = ssm
                index = main
               
                [monitor:///var/log/amazon/ssm]
                disabled = false
                sourcetype = ssm
                index = main
      dest: /opt/splunkforwarder/etc/system/local/inputs.conf
  - name: Configure splunk outputs.conf
    copy:
      content: |
                [tcpout]
 
                [tcpout:main]
                server = {{ splunk_elb }}:{{ splunk_elb_port }}
                [tcpout-server: {{ splunk_elb }}:{{ splunk_elb_port }}]
      dest: /opt/splunkforwarder/etc/system/local/outputs.conf
  - name: Configure splunk server.conf
    copy:
      content: |
                [general]
                serverName = {{ ansible_hostname }}
      dest: /opt/splunkforwarder/etc/system/local/server.conf
  - name: Accept Splunk license
    command: /opt/splunkforwarder/bin/splunk start --accept-license
  - name: Enable splunk at boot
    command: /opt/splunkforwarder/bin/splunk enable boot-start
#  - name: Modify the PHP Setting
#    command: sed -i 's/memory_limit = 128M/memory_limit = 1024M/g' /etc/php.ini;sed -i 's/max_execution_time = 30/max_execution_time = 0/g' /etc/php.ini;sed -i 's/max_input_time = 60/max_input_time = 540/g' /etc/php.ini
  - name: Modify Memory limit in PHP
    lineinfile:
      dest: /etc/php.ini
      regexp: memory_limit = 128M
      line: memory_limit = 1024M
      backrefs: yes
  - name: Modify Max Execution time in PHP
    lineinfile:
      dest: /etc/php.ini
      regexp: max_execution_time = 30
      line: max_execution_time = 0
      backrefs: yes
  - name: Modify Max input time in PHP
    lineinfile:
      dest: /etc/php.ini
      regexp: max_input_time = 60
      line: max_input_time = 540
      backrefs: yes
 
  - name: install Nessus agent
    yum:
      name: "/root/.ansible_files/NessusAgent-6.7.0-amzn.x86_64.rpm"
      state: present
    when: ansible_distribution == 'Amazon' and env == 'con'
  - name: install SSM Agent
    yum:
      name: "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm"
      state: present
    when: ansible_distribution == 'Amazon'
  - name: install Nessus agent
    apt:
      deb: "/root/.ansible_files/NessusAgent-6.7.0-ubuntu1110_amd64.deb"
      state: present
    when: ansible_distribution == 'Ubuntu'  and env == 'con'
  - name: Start Nessus service
    service:
      name: nessusagent
      state: started
    when: env == 'con'
  - name: Link Nessus Agent to server (Prod only)
    command: /opt/nessus_agent/sbin/nessuscli agent link --key={{ nessus_agent_key }} --host={{ nessus_host }} --port={{ nessus_port }} --groups={{ nessus_group }} --name={{ ansible_hostname }}
    when: env == 'con'
  - name: Configure newrelic-infra.yml
    copy:
      content: |
                license_key: c9d0a3147c678da100578bf320093748517eac8c
                display_name: {{ ansible_hostname }}
      dest: /etc/newrelic-infra.yml
  - name: Restart newrelic service
    service:
      name: newrelic-infra
      state: restarted
 
  - name: Remove BitDefender binary if it exists
    file: path="/root/.ansible_files/{{ bitdefender_file }}" state=absent
 
  - name: Copy BitDefender binary from S3
    s3:
      bucket: "{{ techops_bucket }}"
      object: "/{{ bitdefender_file }}"
      dest: "/root/.ansible_files/{{ bitdefender_file }}"
      mode: get
      ignore_nonexistent_bucket: true
  - name: Extract BitDefender
    unarchive:
      src: "/root/.ansible_files/{{ bitdefender_file }}"
      dest: /root/.ansible_files
      creates: /root/.ansible_files/installer
  - name: Make BitDefender installer executable
    file:
      path: /root/.ansible_files/installer
      owner: root
      group: root
      mode: 0755
  - name: Run BitDefender installer
    command: /root/.ansible_files/installer
    args:
      chdir: /root/.ansible_files
      creates: /opt/BitDefender
  handlers:
    - name: restart apache
      service: name=httpd state=restarted
 
